{
    "FastADK Agent Class": {
        "prefix": "fastadk-agent",
        "body": [
            "from fastadk.core.agent import BaseAgent",
            "",
            "",
            "class ${1:MyAgent}(BaseAgent):",
            "    \"\"\"${2:Description of your agent.}\"\"\"",
            "    _description = \"${3:A helpful assistant}\"",
            "    _model_name = \"${4:gpt-3.5-turbo}\"",
            "    _provider = \"${5:openai}\"",
            "",
            "    async def run(self, prompt: str) -> str:",
            "        \"\"\"Run the agent with the given prompt.\"\"\"",
            "        # This is where you implement your agent's behavior",
            "        ${0:return await super().run(prompt)}",
            ""
        ],
        "description": "Create a new FastADK agent class"
    },
    "FastADK Tool Function": {
        "prefix": "fastadk-tool",
        "body": [
            "async def ${1:tool_name}(${2:parameter}: ${3:str}) -> ${4:str}:",
            "    \"\"\"${5:Description of what the tool does.}",
            "",
            "    Args:",
            "        ${2:parameter}: ${6:Description of the parameter}",
            "",
            "    Returns:",
            "        ${7:Description of the return value}",
            "    \"\"\"",
            "    # Implement your tool functionality here",
            "    ${0:pass}",
            ""
        ],
        "description": "Create a new FastADK tool function"
    },
    "FastADK Register Tool": {
        "prefix": "fastadk-register-tool",
        "body": [
            "self.register_tool(",
            "    name=\"${1:tool_name}\",",
            "    description=\"${2:Description of what the tool does}\",",
            "    function=${3:tool_function},",
            "    parameters={",
            "        \"${4:parameter_name}\": {",
            "            \"type\": \"${5:string}\",",
            "            \"description\": \"${6:Description of the parameter}\"",
            "        }$0",
            "    }",
            ")"
        ],
        "description": "Register a tool with a FastADK agent"
    },
    "FastADK Memory Provider": {
        "prefix": "fastadk-memory",
        "body": [
            "from fastadk.memory.base import MemoryBackend",
            "from typing import Dict, List, Optional, Any",
            "",
            "",
            "class ${1:CustomMemory}(MemoryBackend):",
            "    \"\"\"${2:Custom memory implementation for FastADK.}\"\"\"",
            "",
            "    def __init__(self, ${3:options}):",
            "        \"\"\"Initialize the memory backend.\"\"\"",
            "        super().__init__()",
            "        ${4:# Initialize your memory backend}",
            "",
            "    async def store(self, session_id: str, key: str, value: Any) -> None:",
            "        \"\"\"Store a value in memory.\"\"\"",
            "        ${5:# Implement store logic}",
            "",
            "    async def retrieve(self, session_id: str, key: str) -> Optional[Any]:",
            "        \"\"\"Retrieve a value from memory.\"\"\"",
            "        ${6:# Implement retrieve logic}",
            "        return None",
            "",
            "    async def list_keys(self, session_id: str) -> List[str]:",
            "        \"\"\"List all keys for a session.\"\"\"",
            "        ${7:# Implement list_keys logic}",
            "        return []",
            "",
            "    async def clear(self, session_id: str) -> None:",
            "        \"\"\"Clear all memory for a session.\"\"\"",
            "        ${8:# Implement clear logic}",
            ""
        ],
        "description": "Create a custom memory backend for FastADK"
    },
    "FastADK Context Policy": {
        "prefix": "fastadk-context-policy",
        "body": [
            "from fastadk.core.context_policy import ContextPolicy",
            "from fastadk.core.context import Context",
            "",
            "",
            "class ${1:CustomContextPolicy}(ContextPolicy):",
            "    \"\"\"${2:Custom context policy for controlling how context is managed.}\"\"\"",
            "",
            "    def __init__(self, ${3:options}):",
            "        \"\"\"Initialize the context policy.\"\"\"",
            "        super().__init__()",
            "        ${4:# Initialize your context policy}",
            "",
            "    async def apply(self, context: Context) -> Context:",
            "        \"\"\"Apply the policy to the given context.\"\"\"",
            "        ${5:# Implement your context policy logic}",
            "        return context",
            ""
        ],
        "description": "Create a custom context policy for FastADK"
    },
    "FastADK Test Scenario": {
        "prefix": "fastadk-test-scenario",
        "body": [
            "from fastadk.testing.utils import AgentTest, scenario",
            "from fastadk.testing.mock_tools import MockLLM, test_scenario, create_test_scenario",
            "from ${1:your_agent_module} import ${2:YourAgent}",
            "",
            "",
            "class ${3:YourAgentTest}(AgentTest):",
            "    \"\"\"Test suite for ${2:YourAgent}.\"\"\"",
            "",
            "    agent_class = ${2:YourAgent}",
            "",
            "    async def setup(self):",
            "        \"\"\"Set up the test environment.\"\"\"",
            "        self.agent = self.agent_class()",
            "        # Replace the agent's model with a mock",
            "        self.agent.model = MockLLM(responses={",
            "            \"${4:test prompt pattern}\": \"${5:test response}\"",
            "        })",
            "",
            "    @test_scenario(create_test_scenario(",
            "        description=\"${6:Test basic agent functionality}\",",
            "        inputs=[\"${7:Hello, how are you?}\"],",
            "        expected_outputs=[\"${8:I'm doing well, thank you for asking!}\"],",
            "        expected_tools=[]",
            "    ))",
            "    async def test_basic_interaction(self):",
            "        \"\"\"Test a basic interaction with the agent.\"\"\"",
            "        response = await self.agent.run(\"${7:Hello, how are you?}\")",
            "        assert \"${9:well}\" in response.lower()",
            "        return response",
            ""
        ],
        "description": "Create a test scenario for a FastADK agent"
    }
}
